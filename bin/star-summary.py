#!/usr/bin/env python
# import
## batteries
from __future__ import print_function
import os
import re
import sys
import argparse
import logging
from typing import List, Dict, Any, Tuple
import pandas as pd
from db_utils import db_connect, db_upsert

# logging
logging.basicConfig(format='%(asctime)s - %(message)s', level=logging.DEBUG)

# argparse
class CustomFormatter(argparse.ArgumentDefaultsHelpFormatter,
                      argparse.RawDescriptionHelpFormatter):
    pass

desc = 'Summarize STAR summary files'
epi = """DESCRIPTION:
Summarize STAR summary files into a single table. The summary files
are generated by the STAR aligner and contain information about the
alignment statistics. The script reads in all summary files and
concatenates them into a single table. The table is then written to
a file and upserted into the database.
"""
parser = argparse.ArgumentParser(description=desc, epilog=epi,
                                 formatter_class=CustomFormatter)
parser.add_argument('summary_csv', type=str, nargs='+',
                    help='STAR summary csv file(s)')
parser.add_argument('--sample', type=str, default="",
                    help='Sample name')
parser.add_argument('--outfile', type=str, default="Summary.csv",
                    help='Output file')
         
# functions
def main(args):
    # set pandas display optionqs
    pd.set_option('display.max_columns', 50)
    pd.set_option('display.max_rows', 100)
    pd.set_option('display.width', 300)

    # read in all summary csv files and concatenate
    df = []
    regex = re.compile(r"_summary.csv$")
    for infile in args.summary_csv:
        x = pd.read_csv(infile, header=None)
        x.columns = ["category", "value"]
        x["feature"] = regex.sub("", os.path.basename(infile))
        df.append(x)
    df = pd.concat(df)

    # status
    logging.info(f"Number of rows in the raw table: {df.shape[0]}")

    # format category
    for x in ["Gene", "GeneFull", "GeneFull_Ex50pAS", "GeneFull_ExonOverIntron", "Velocyto"]:
        regex = re.compile(f" {x} ")
        df["category"] = df["category"].apply(lambda x: regex.sub(" feature ", x))

    # pivot table
    df = df.pivot(index='feature', columns='category', values='value').reset_index()
    
    # format columns: no spaces and lowercase
    df.columns = df.columns.str.replace(r'\W', '_', regex=True).str.lower() 

    # coerce columns to numeric
    for col in df.columns.to_list():
        if col != "feature":
            df[col] = pd.to_numeric(df[col], errors='coerce')

    # float columns to integer
    cols_to_convert = ["estimated_number_of_cells", "number_of_reads", "umis_in_cells"]
    for col in cols_to_convert:
        if col in df.columns:
            df[col] = df[col].fillna(0).replace([float('inf'), -float('inf')], 0).astype(int)

    # add sample name
    df["sample"] = args.sample

    # status
    logging.info(f"Number of rows after formattings: {df.shape[0]}")

    # upsert results to database
    logging.info("Updating screcounter_star_results...")
    # with db_connect() as conn:
    #     db_upsert(df, "screcounter_star_results", conn)

    # write output table
    outdir = os.path.dirname(args.outfile)
    if outdir != "":
        os.makedirs(outdir, exist_ok=True)
    df.to_csv(args.outfile, index=False)

    # update screcounter log
    logging.info("Updating screcounter_log...")
    log_df = pd.DataFrame({
        "sample": [args.sample],
        "accession": [""],
        "process": ["STAR-full"],
        "step": ["Final"],
        "status": ["Success"],
        "message": ["STAR summary table generated"]
    })
    # with db_connect() as conn:
    #     db_upsert(log_df, "screcounter_log", conn)


## script main
if __name__ == '__main__':
    args = parser.parse_args()
    main(args)

    
